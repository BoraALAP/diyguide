{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/artticfox/Desktop/Work/reactNative/diyguide/backend/src/utils/supabase/server.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\n\nexport async function createClient() {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll();\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            );\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    },\n  );\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AADA;;;AAGO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,6PAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file:///Users/artticfox/Desktop/Work/reactNative/diyguide/backend/src/app/api/generate-guide/route.ts"],"sourcesContent":["\"use server\";\n\nimport OpenAI from \"openai\";\n\nimport { zodResponseFormat } from \"openai/helpers/zod\";\nimport { z } from \"zod\";\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { createClient } from \"@/utils/supabase/server\";\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n  organization: process.env.OPENAI_ORGANIZATION_ID,\n  project: process.env.OPENAI_PROJECT_ID,\n});\n\nconst StepSchema = z.object({\n  step: z.number(),\n  description: z.string(),\n  materials: z.array(z.string()),\n  tools: z.array(z.string()),\n});\n\nconst GuideSchema = z.object({\n  title: z.string(),\n  content: z.string(),\n  steps: z.array(StepSchema),\n  tags: z.array(z.string()),\n});\n\nexport async function POST(req: NextRequest) {\n  console.log(\"testing\");\n  console.log(req.body);\n\n  const { query } = await req.json();\n\n  console.log(query);\n\n  try {\n    const supabase = await createClient();\n\n    const aiResponse = await openai.beta.chat.completions.parse({\n      model: \"gpt-4o-2024-08-06\",\n      messages: [{\n        role: \"system\",\n        content:\n          \"You are a specialist on writing a do it your self guides. You are given a topic and you need to write a detailed guide for it. You need to provide steps and tips. also generate a list of materials and tools needed. additionally, give tags for the guide.\",\n      }, {\n        role: \"user\",\n        content: query,\n      }],\n      response_format: zodResponseFormat(GuideSchema, \"guide\"),\n      max_tokens: 500,\n    });\n\n    const content = aiResponse.choices[0].message.parsed;\n\n    console.log(content);\n    if (!content) throw new Error(\"No content\");\n    const { data, error } = await supabase\n      .from(\"guides\")\n      .insert([{\n        title: content.title,\n        content: content.content,\n        steps: content.steps,\n        created_by: \"AI\",\n        tags: content.tags,\n      }])\n      .select(\"id, title\");\n\n    console.log(data);\n\n    if (error) throw error;\n\n    return NextResponse.json(query);\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return NextResponse.json(\n      { error: \"Internal Server Error\" },\n      { status: 500 },\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;AAMA;AAEA;;AANA;AAGA;AADA;;;;;;;;AAMA,MAAM,SAAS,IAAI,kJAAA,CAAA,UAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;IAClC,cAAc,QAAQ,GAAG,CAAC,sBAAsB;IAChD,SAAS,QAAQ,GAAG,CAAC,iBAAiB;AACxC;AAEA,MAAM,aAAa,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,MAAM,sIAAA,CAAA,IAAC,CAAC,MAAM;IACd,aAAa,sIAAA,CAAA,IAAC,CAAC,MAAM;IACrB,WAAW,sIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM;IAC3B,OAAO,sIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM;AACzB;AAEA,MAAM,cAAc,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM;IACf,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM;IACjB,OAAO,sIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;IACf,MAAM,sIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM;AACxB;AAEO,eAAe,KAAK,GAAgB;IACzC,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,IAAI,IAAI;IAEpB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;IAEhC,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,MAAM,WAAW,MAAM,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD;QAElC,MAAM,aAAa,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC1D,OAAO;YACP,UAAU;gBAAC;oBACT,MAAM;oBACN,SACE;gBACJ;gBAAG;oBACD,MAAM;oBACN,SAAS;gBACX;aAAE;YACF,iBAAiB,CAAA,GAAA,2IAAA,CAAA,oBAAiB,AAAD,EAAE,aAAa;YAChD,YAAY;QACd;QAEA,MAAM,UAAU,WAAW,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM;QAEpD,QAAQ,GAAG,CAAC;QACZ,IAAI,CAAC,SAAS,MAAM,IAAI,MAAM;QAC9B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,UACL,MAAM,CAAC;YAAC;gBACP,OAAO,QAAQ,KAAK;gBACpB,SAAS,QAAQ,OAAO;gBACxB,OAAO,QAAQ,KAAK;gBACpB,YAAY;gBACZ,MAAM,QAAQ,IAAI;YACpB;SAAE,EACD,MAAM,CAAC;QAEV,QAAQ,GAAG,CAAC;QAEZ,IAAI,OAAO,MAAM;QAEjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,UAAU;QACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;;;IApDsB;;AAAA,iPAAA"}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}